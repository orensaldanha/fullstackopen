{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","message","notificationStyle","color","type","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","text","Filter","handleFilterText","onChange","PersonForm","props","onSubmit","addPerson","value","newName","handleNewName","newNumber","handleNewNumber","Person","name","number","handleDelete","onClick","App","useState","persons","setPersons","setNewName","setNewNumber","filterText","setFilterText","notificationMessage","setNotificationMessage","useEffect","personService","initialPersons","event","target","preventDefault","index","findIndex","person","returnedPerson","concat","setTimeout","catch","error","personObject","window","confirm","changedPersonObject","personId","map","p","filter","toLowerCase","startsWith","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9b02699.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Notification = ({ message }) => {\n  if (message !== null) {\n    const messageColor = message.type === 'error' ? 'red' : 'green'\n\n    const notificationStyle = {\n      color: messageColor,\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10\n    }\n    return (\n      <div style={notificationStyle}>\n        {message.text}\n      </div>\n    )\n  }\n\n  return null\n}\n\nconst Filter = ({ handleFilterText }) => {\n  return (\n    <div>\n      filter show with <input onChange={handleFilterText}/>\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNewName}/>\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNewNumber}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Person = ({ name, number, handleDelete }) => {\n  return (\n    <div>\n      {name} {number} <button onClick={handleDelete}>delete</button>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterText, setFilterText ] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => setPersons(initialPersons))\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const index = persons.findIndex(person => person.name === newName)\n\n    if (index === -1) {\n      const personObject = { \n        name: newName,  \n        number: newNumber\n      }\n\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          \n          setNotificationMessage({\n            text: `Added ${returnedPerson.name}`,\n            type: 'success'\n          })\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setNotificationMessage({\n            text: error.response.data.error,\n            type: 'error'\n          })\n\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n        })\n\n    } else {\n      const personObject = persons[index]\n\n      if (window.confirm(`${personObject.name} is already added to phonebook, replace the old number with a new one?`)) {\n        const changedPersonObject = {\n          ...personObject,\n          number: newNumber\n        }\n        const personId = changedPersonObject.id\n  \n        personService\n          .update(personId, changedPersonObject)\n          .then(returnedPerson => {\n            setPersons(persons.map(p => p.id !== personId ? p : returnedPerson))\n            setNewName('')\n            setNewNumber('')\n\n            setNotificationMessage({\n              text: `Changed ${returnedPerson.name}'s number`,\n              type: 'success'\n            })\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 3000)\n          })\n          .catch(error => {\n            setNotificationMessage({\n              text: error.response.data.error,\n              type: 'error'\n            })\n  \n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 3000)\n          })\n      }\n    }\n  }\n\n  const handleNewName = (event) => setNewName(event.target.value)\n  const handleNewNumber = (event) => setNewNumber(event.target.value)\n  const handleFilterText = (event) => setFilterText(event.target.value)\n  const handleDelete = person => {\n    if (window.confirm(`Delete ${person.name} ?`)) {\n      personService\n        .remove(person.id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n\n          setNotificationMessage({\n            text: `Deleted ${person.name}`,\n            type: 'success'\n          })\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Filter handleFilterText={handleFilterText}/>\n      <h2>add a new</h2>\n      <PersonForm \n        newName={newName}\n        newNumber={newNumber}\n        addPerson={addPerson}\n        handleNewName={handleNewName}\n        handleNewNumber={handleNewNumber}\n      />\n      <h2>Numbers</h2>\n      {persons.filter(person => person.name.toLowerCase().startsWith(filterText.toLowerCase()))\n              .map(person => \n                <Person \n                  key={person.id} \n                  name={person.name} \n                  number={person.number} \n                  handleDelete={() => handleDelete(person)}/>\n              )\n      }\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}